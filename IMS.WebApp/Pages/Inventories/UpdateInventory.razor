@page "/updateinventory/{InvId:int}"
@inject NavigationManager NavigationManager
@inject IUpdateInventoryUseCase UpdateInventoryUseCase 
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase
@*@attribute [Authorize(Policy = "Inventory")]*@
<h3>Update Inventory</h3>
<br/>

<EditForm model="inventory" OnValidSubmit="SaveInventory">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="form-group">
        <label for="name">Inventory Name</label>
        <InputText id="name" @bind-Value="inventory.InventoryName" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity" @bind-Value="inventory.Quantity" class="form-control"></InputNumber>
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="inventory.Price" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public int InvId { get; set; }

    public Inventory inventory { get; set; } = new Inventory();

    protected override async Task OnParametersSetAsync()
    {
        this.inventory = await ViewInventoryByIdUseCase.ExecuteAsync(InvId);
    }

    private async Task SaveInventory()
    {
        await UpdateInventoryUseCase.ExecuteAsync(inventory);
        NavigationManager.NavigateTo("/inventories");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/inventories");
    }
}
